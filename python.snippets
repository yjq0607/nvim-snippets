snippet snip "list all custom snips"
	config
	tag1
	seaborn
	pandas
	bsq
	readfile
	writefile


snippet config
	from configparser import ConfigParser


	config1 = Configparser()
	config1.read("${0:filename.ini}")


snippet tag1 "soup.find_all"
	for ${1:tag1} in soup.find_all("${2:a}", class_="${3:class}", id="${4:id}"):
		${0:pass}


snippet seaborn
	import pandas as pd
	import matplotlib.pyplot as plt
	import seaborn as sns
	
	
	${0:${VISUAL}}


snippet pandas
	import pandas as pd
	import numpy as np
	import matplotlib.pyplot as plt
	
	
	${0:${VISUAL}}


snippet bsq "BeautifulSoup Requests"
	import requests
	from bs4 import BeautifulSoup


	url = "${0:${VISUAL}}"
	response = requests.get(url)
	soup = BeautifulSoup(response.text, "lxml")


snippet readfile
	with open("${1:fileName.txt}", "r", encoding="utf-8") as f:
		${0${VISUAL:content}} = f.read()


snippet writefile
	with open("${1:fileName.txt}", "w", encoding="utf-8") as f:
		f.write(${0${VISUAL:content}})


snippet from
	from ${1:package} import ${2:module} as ${0:abbreviations}


snippet while
	while $1:
		${0:${VISUAL}}


snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}


# New Class
snippet superclass
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}


snippet class
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			self.$3 = $3
			${0}


# New Function
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0:pass}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0:pass}


# New Method
snippet init
	def __init__(self, ${1:args}):
		${0}
snippet method
	def ${1:mname}(self, ${2:arg}):
		${0}
snippet static
	@staticmethod
	def ${1:mname}(self, ${2:arg}):
		${0}


# Ifs
snippet if
	if $1:
		${0:${VISUAL}}
snippet else
	else:
		${0:${VISUAL}}
snippet elif
	elif $1:
		${0:${VISUAL}}

# Match
snippet match Structural pattern matching
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case ${4:pattern_2}:
			${5:pass}


# For
snippet for
	for ${1:item} in ${2:items}:
		${0:${VISUAL}}


# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}


snippet sa self.attribute = attribute
	self.${1:attribute} = $1


snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
snippet trye Try/Except/Else
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet tryf Try/Except/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet tryef Try/Except/Else/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}


# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}


snippet dol
	def ${1:__init__}(self, *args, **kwargs):
		super(${0:ClassName}, self).$1(*args, **kwargs)


snippet args
	*args${1:,}${0}
snippet kwargs
	**kwargs${1:,}${0}
snippet akw
	*args, **kwargs${1:,}${0}

# comprehensions
snippet listComp
	[${1} for ${2} in ${3:${VISUAL}}]${0}
snippet dictComp
	{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}
snippet setComp
	{${1} for ${2} in ${3:${VISUAL}}}${0}

snippet mtprocess
	import multiprocessing
	pool = multiprocessing.Pool()
	pool.map(${1:func}, ${2:range(1,100000)})
	pool.close()

